# -*- coding: utf-8 -*-

"""
Create at 2017/3/21
用户数据模型
"""
from django.db import models
# from django.contrib.auth.models import User
from django.db import models
# from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.utils import timezone
from django.conf import settings
from django.db.models.signals import post_save
from django.dispatch import receiver
from rest_framework.authtoken.models import Token
from django.contrib.auth.models import AbstractUser
# from dao.models.music import AllSongMusic
import datetime
from django.contrib.contenttypes.models import ContentType
import boto3
from django.contrib.contenttypes.fields import GenericForeignKey
from django.db.models import signals

# Create your models here.
SEX_TYPE = (
    (9, 'None'),
    (0, 'MAN'),
    (1, 'WOMEN'),
)

class MobileVersion(models.Model):
    mobile_brand=models.CharField(max_length=300,blank=True,null=True,verbose_name=u'手机品牌Manufacturer')
    mobile_name=models.CharField(max_length=300,blank=True,null=True,verbose_name=u'手机名称name')
    mobile_version=models.CharField(max_length=300,blank=True,null=True,verbose_name=u'手机型号Model')
    mobile_edition=models.CharField(max_length=300,blank=True,null=True,verbose_name=u'手机固件版本OS')
    mobile_yj_name=models.CharField(max_length=300,blank=True,null=True,verbose_name=u'硬件名称deviceName')
    default_time=models.IntegerField(default=300,verbose_name=u'默认延迟毫秒数')
    delay_time=models.IntegerField(default=0,verbose_name=u'延迟毫秒数')
    error_count=models.IntegerField(default=0,verbose_name=u'检测失败次数')

    class Meta:
        verbose_name_plural=u'手机型号版本'

    # def __str__(self):
    #     return self.id

class User(AbstractUser):
    """个人资料"""
    nickname = models.CharField(max_length=100, blank=True, db_index=True, verbose_name=u'昵称')
    resume = models.CharField(max_length=200, blank=True, null=True, verbose_name=u'个人介绍')
    sex = models.IntegerField(choices=SEX_TYPE, default=9, blank=True, null=True, verbose_name=u'性别')
    picture = models.CharField(blank=True, null=True, max_length=2000, verbose_name=u'头像地址')
    picture_bucket_name = models.CharField(max_length=200, default='duetin-user-tx', verbose_name=u'头像文件BUCKET名称')
    picture_key_name = models.CharField(max_length=200,blank=True, null=True, verbose_name=u'头像文件bucket的key')
    phone = models.CharField(max_length=64, default='', blank=True, verbose_name=u'电话')
    region = models.CharField(max_length=50, blank=True, null=True, verbose_name=u'地区')
    birth = models.CharField(max_length=50, blank=True, null=True, verbose_name=u'生日')
    new_birth=models.BigIntegerField(blank=True,null=True,verbose_name=u'生日时间戳')
    background_key_name=models.CharField(max_length=200,blank=True,null=True,verbose_name=u'背景图片的key')

    is_important = models.BooleanField(default=False, verbose_name=u'是否属于大V')
    add_user_rank = models.IntegerField(default=0, verbose_name=u'添加用户,运营,显示用户排序')
    is_recommend = models.BooleanField(default=False, verbose_name=u'是否推荐给新用户')
    new_user_rank = models.IntegerField(default=0, verbose_name=u'新用户推荐排序')
    is_enable = models.BooleanField(default=True, verbose_name=u'是否允许登录')
    is_delete = models.BooleanField(default=False, verbose_name=u'是否被删除')
    is_email_val = models.BooleanField(default=False, verbose_name=u'是否已经邮件验证')
    mobile = models.ForeignKey(MobileVersion, blank=True, null=True, related_name="usermoblie",
                               verbose_name=u'用户对应手机信息')
    code = models.CharField(max_length=200, null=True, blank=True, verbose_name=u'ins登录code')
    created_at = models.DateTimeField(null=True, blank=True, auto_now_add=True, verbose_name=u'创建日期')
    deleted_at = models.DateTimeField(null=True, blank=True, verbose_name=u'删除日期')

    class Meta:
        verbose_name_plural = u'用户信息'

        permissions = (
            ('view_operate_list', u"运营管理"),  # 权限字段名称及其解释
            # ('view_customer_info', u"查看客户详情"),
            # ('edit_own_customer_info', u"修改客户信息"),
        )

    def __str__(self):
        return self.username

#创建用户同时创建token
@receiver(post_save, sender=settings.AUTH_USER_MODEL)
def create_auth_token(sender, instance=None, created=False, **kwargs):
    if created:
        Token.objects.create(user=instance)



class ResetPasswordToken(models.Model):
    user = models.OneToOneField(User)

    # URL generated by sha256, so we need max_length=64
    dynamic_url = models.CharField(max_length=64, unique=True, null=True)
    entry_token = models.CharField(max_length=64, blank=True)
    created_time = models.DateTimeField(auto_now_add=True)
    updated_time = models.DateTimeField(auto_now=True)
    expire_time = models.DateTimeField(auto_now_add=True)
    is_activate = models.BooleanField(default=True)


class RegisterEmailToken(models.Model):
    user = models.OneToOneField(User)

    # URL generated by sha256, so we need max_length=64
    dynamic_url = models.CharField(max_length=64, unique=True, null=True)
    entry_token = models.CharField(max_length=64, blank=True)
    created_time = models.DateTimeField(auto_now_add=True)
    updated_time = models.DateTimeField(auto_now=True)
    expire_time = models.DateTimeField(auto_now_add=True)
    is_activate = models.BooleanField(default=True)



class Fans(models.Model):
    """好友关系"""
    owner_id = models.ForeignKey(User, related_name='fans_owner', verbose_name=u'主动关注方')
    follower_id = models.ForeignKey(User, related_name='fans_follower', verbose_name=u'被关注方')

    created_at = models.DateTimeField(null=True, blank=True, auto_now_add=True)
    deleted_at = models.DateTimeField(null=True, blank=True)

    class Meta:
        verbose_name_plural = u'好友关系管理'

    def __str__(self):
        return '%s follow %s' % (self.owner_id.username, self.follower_id.username)


class Block(models.Model):
    """黑名单"""
    owner_id = models.IntegerField(blank=True, null=True)
    blacker_id = models.IntegerField(blank=True, null=True)

    created_at = models.DateTimeField(null=True, blank=True, auto_now_add=True)
    deleted_at = models.DateTimeField(null=True, blank=True)

    class Meta:
        verbose_name_plural = u'黑名单管理'


class NotificationApp(models.Model):
    """
    消息模型
    """
    title = models.CharField(max_length=20,blank=True, null=True, verbose_name=u'标题')
    text = models.CharField(max_length=200, blank=True, null=True, verbose_name=u'内容')
    link = models.CharField(max_length=200, null=True, blank=True, verbose_name=u'链接')
    from_user = models.ForeignKey(User, default=None, blank=True, null=True, related_name='from_user_notifaction1',
                                  verbose_name=u'发送者')
    # action_user=models.ForeignKey(User, default=None, blank=True, null=True, related_name='action_user_notifaction',
    #                               verbose_name=u'被执行活动的人')
    post=models.CharField(max_length=200,blank=True,null=True,verbose_name=u'相关作品ID')
    # all_post=models.ForeignKey(AllSongMusic,blank=True,null=True,related_name='allsong_music_notifaction',verbose_name=u'相关作品')
    to_user = models.ForeignKey(User, related_name='to_user_notifaction1', verbose_name=u'接受者')
    type = models.CharField(max_length=200, null=True, blank=True, verbose_name=u'类型')
    is_read = models.BooleanField(default=False, verbose_name=u'是否已读')
    created_at = models.DateTimeField(null=True, blank=True, auto_now_add=True)
    is_delete = models.BooleanField(default=False)
    deleted_at = models.DateTimeField(null=True, blank=True)


    class Meta:
        verbose_name_plural = u'消息管理'
        ordering = ('-created_at',)

    def timesince(self, now=None):
        """
        Shortcut for the ``django.utils.timesince.timesince`` function of the
        current timestamp.
        """
        from django.utils.timesince import timesince as timesince_
        return timesince_(self.created_at, now)

    # def __str__(self):
    #     return self.id


class FollowerNotification(models.Model):
    #我的关注者的动态
    title = models.CharField(max_length=20,blank=True, null=True, verbose_name=u'标题')
    text = models.CharField(max_length=200, blank=True, null=True, verbose_name=u'内容')
    link = models.CharField(max_length=200, null=True, blank=True, verbose_name=u'链接')
    from_user = models.ForeignKey(User, default=None, blank=True, null=True, related_name='from_user_f_notifaction',
                                  verbose_name=u'发送者')
    action_user=models.ForeignKey(User, default=None, blank=True, null=True, related_name='action_user_f_notifaction',
                                  verbose_name=u'被执行活动的人')
    post=models.CharField(max_length=200,blank=True,null=True,verbose_name=u'相关作品ID')
    to_user = models.ForeignKey(User, related_name='to_user_f_notifaction', verbose_name=u'接受消息者')
    type = models.CharField(max_length=200, null=True, blank=True, verbose_name=u'类型')
    is_read = models.BooleanField(default=False, verbose_name=u'是否已读')
    created_at = models.DateTimeField(null=True, blank=True, auto_now_add=True)
    is_delete = models.BooleanField(default=False)
    deleted_at = models.DateTimeField(null=True, blank=True)


    class Meta:
        verbose_name_plural = u'消息管理'
        ordering = ('-created_at',)

    def timesince(self, now=None):
        """
        Shortcut for the ``django.utils.timesince.timesince`` function of the
        current timestamp.
        """
        from django.utils.timesince import timesince as timesince_
        return timesince_(self.created_at, now)

    # def __str__(self):
    #     return self.id


class UserNotificationsCount(models.Model):
    """这个Model保存着每一个用户的未读消息数目"""

    user_id = models.IntegerField(primary_key=True)
    unread_count = models.IntegerField(default=0)

    def __str__(self):
        return '<UserNotificationsCount %s: %s>' % (self.user_id, self.unread_count)



class Suggest(models.Model):
    """建议"""
    title = models.CharField(max_length=100, blank=True, null=True, verbose_name=u'标题')
    context = models.CharField(max_length=200, verbose_name=u'内容')
    owner = models.ForeignKey(User, related_name='from_user_suggest',
                              verbose_name=u'发送者')
    # type = models.CharField(max_length=200, null=True, blank=True, verbose_name=u'类型')
    is_read = models.BooleanField(default=False, verbose_name=u'是否已读')
    created_at = models.DateTimeField(auto_now_add=True)
    is_delete = models.BooleanField(default=False)
    deleted_at = models.DateTimeField(null=True, blank=True)

    class Meta:
        verbose_name_plural = u'建议管理'

    def __str__(self):
        return self.context


class InsBinding(models.Model):
    """
    绑定ins账号存储ins信息表
    """

    provider = models.CharField(max_length=200, blank=True, null=True, verbose_name=u'应用名称')
    uid = models.BigIntegerField(unique=True,verbose_name=u'应用用户UID')
    access_token = models.CharField(max_length=250, blank=True, null=True, verbose_name=u'access_token')
    user = models.ForeignKey(User, blank=True, null=True, verbose_name=u'关联用户')
    created_at = models.DateTimeField(auto_now_add=True,blank=True,null=True)

    class Meta:
        verbose_name_plural = u'绑定ins账号信息'

    def __str__(self):
        return self.uid